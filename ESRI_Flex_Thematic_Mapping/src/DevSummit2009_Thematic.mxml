<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml"
        xmlns:esri="http://www.esri.com/2008/ags"
        layout="horizontal" styleName="plain"
        pageTitle="Flex Thematic Mapping demo at ESRI Developer Summit 2009">
    <mx:Style>
        HSlider {
           borderColor: #336699;
           invertThumbDirection: true;
           labelOffset: 41;
           showTrackHighlight: true;
           tickOffset: 17;
        }
    </mx:Style>
    
    <mx:Script>
        <![CDATA[
            import mx.controls.Label;
            import mx.containers.HBox;
            import mx.core.UIComponent;
            import com.esri.ags.geometry.MapPoint;
            import com.esri.ags.Graphic;
            import com.esri.ags.events.QueryEvent;
            import com.esri.ags.symbol.Symbol;
            import com.esri.ags.symbol.SimpleFillSymbol;
            import com.esri.ags.symbol.SimpleLineSymbol;
            
            import flash.utils.setTimeout;

            import mx.core.IToolTip;
            import mx.events.FlexEvent;
            import mx.events.ToolTipEvent;
            
            private var lineSymbol:SimpleLineSymbol = new SimpleLineSymbol("solid", 0x000000);
            [Bindable]
            private var noDataSymbol:Symbol = new SimpleFillSymbol("solid", 0x000000, 1.0, lineSymbol);
            
            private var salePriceSymbols:Array = [
                new SimpleFillSymbol("solid", 0xFFFFCC, 1.0, lineSymbol),
                new SimpleFillSymbol("solid", 0xC2E699, 1.0, lineSymbol),
                new SimpleFillSymbol("solid", 0x78C679, 1.0, lineSymbol),
                new SimpleFillSymbol("solid", 0x31A354, 1.0, lineSymbol),
                new SimpleFillSymbol("solid", 0x006837, 1.0, lineSymbol)
            ];

            private var yearBuiltSymbols:Array = [
                new SimpleFillSymbol("solid", 0xFFFFB2, 1.0, lineSymbol),
                new SimpleFillSymbol("solid", 0xFECC5C, 1.0, lineSymbol),
                new SimpleFillSymbol("solid", 0xFD8D3C, 1.0, lineSymbol),
                new SimpleFillSymbol("solid", 0xF03B20, 1.0, lineSymbol),
                new SimpleFillSymbol("solid", 0xBD0026, 1.0, lineSymbol)
            ];
            
            private function createSalePriceLegend():void {
                salePriceLegend.addChild(createLegendItem(salePriceSymbols[4].color, "More than $800K"));
                salePriceLegend.addChild(createLegendItem(salePriceSymbols[3].color, "$600K to $800K"));
                salePriceLegend.addChild(createLegendItem(salePriceSymbols[2].color, "$400K to $600K"));
                salePriceLegend.addChild(createLegendItem(salePriceSymbols[1].color, "$200K to $400K"));
                salePriceLegend.addChild(createLegendItem(salePriceSymbols[0].color, "Less than $200K"));
                salePriceLegend.addChild(createLegendItem(0x000000, "No Data"));
            }

            private function createYearBuiltLegend():void {
                yearBuiltLegend.addChild(createLegendItem(yearBuiltSymbols[4].color, "Newer than 1990"));
                yearBuiltLegend.addChild(createLegendItem(yearBuiltSymbols[3].color, "1960 to 1990"));
                yearBuiltLegend.addChild(createLegendItem(yearBuiltSymbols[2].color, "1930 to 1960"));
                yearBuiltLegend.addChild(createLegendItem(yearBuiltSymbols[1].color, "1900 to 1930"));
                yearBuiltLegend.addChild(createLegendItem(yearBuiltSymbols[0].color, "Older than 1900"));
                yearBuiltLegend.addChild(createLegendItem(0x000000, "No Data"));
            }
            
            private function createLegendItem(color:uint, text:String):UIComponent {
                var hbox:HBox = new HBox();
                
                hbox.addChild(createSwatch(color));
                var label:Label = new Label();
                label.text = text;
                hbox.addChild(label);
                
                return hbox;
            }
            
            private function createSwatch(color:uint):UIComponent {
                var swatch:UIComponent = new UIComponent();
                
                swatch.width = 30;
                swatch.height = 20;
                swatch.graphics.beginFill(color);
                swatch.graphics.drawRoundRect(0, 0, swatch.width, swatch.height, 10);
                swatch.graphics.endFill();
                
                return swatch;
            }
            
            private function queryExecuteCompleteHandler(event:QueryEvent):void {
                var features:Array = event.featureSet.features;
                for each (var graphic:Graphic in features) {
                    // using weak references
                    graphic.addEventListener(MouseEvent.ROLL_OVER, graphicRollOverHandler, false, 0, true);
                    graphic.addEventListener(MouseEvent.ROLL_OUT, graphicRollOutHandler, false, 0, true);
                    // toolTip must not be empty for toolTipShow event to occur
                    graphic.toolTip = " ";
                    // will delay toolTip creation until it's needed
                    graphic.addEventListener(ToolTipEvent.TOOL_TIP_SHOW, graphicToolTipShowHandler, false, 0, true);
                }
                // faster than adding one at a time
                graphicsLayer.graphicProvider = features;
            }

            private function graphicRollOverHandler(event:MouseEvent):void {
                glowEffect.play([event.target]);
            }
            
            private function graphicRollOutHandler(event:MouseEvent):void {
                // play reversed
                glowEffect.play([event.target], true);
                setTimeout(cleanupGlowEffect, glowEffect.duration, event.target);
            }
            
            private function cleanupGlowEffect(graphic:Graphic):void {
                // remove leftover artifacts
                graphic.filters = [];
            }
            
            private function graphicToolTipShowHandler(event:ToolTipEvent):void {
                var graphic:Graphic = event.target as Graphic;
                var toolTip:IToolTip = event.toolTip;
                toolTip.text = "ID: " + graphic.attributes.OBJECTID + "\n"
                    + "Sale Price: " + currencyFormatter.format(graphic.attributes.SALEPRICE) 
                    + "\n"
                    + "Year Built: " + graphic.attributes.YEARBUILT;
            }

            // called on every redraw of the graphics
            private function getSalePriceSymbol(graphic:Graphic):Symbol {
                var symbol:Symbol = noDataSymbol;
                
                var salePrice:Number = graphic.attributes.SALEPRICE;
                
                if (salePrice > 0) {
                    if (salePrice < 200000) {
                        symbol = salePriceSymbols[0];
                    } else if (salePrice < 400000) {
                        symbol = salePriceSymbols[1];
                    } else if (salePrice < 600000) {
                        symbol = salePriceSymbols[2];
                    } else if (salePrice < 800000) {
                        symbol = salePriceSymbols[3];
                    } else {
                        symbol = salePriceSymbols[4];
                    }
                }
                
                return symbol;
            }
            
            private function getYearBuiltSymbol(graphic:Graphic):Symbol {
                var symbol:Symbol = noDataSymbol;
                
                var yearBuilt:Number = graphic.attributes.YEARBUILT;
                
                if (yearBuilt > 0) {
                    if (yearBuilt < 1900) {
                        symbol = yearBuiltSymbols[0];
                    } else if (yearBuilt < 1930) {
                        symbol = yearBuiltSymbols[1];
                    } else if (yearBuilt < 1960) {
                        symbol = yearBuiltSymbols[2];
                    } else if (yearBuilt < 1990) {
                        symbol = yearBuiltSymbols[3];
                    } else {
                        symbol = yearBuiltSymbols[4];
                    }
                }
                
                return symbol;
            }
            
            private function toPercent(value:Number):String {
                return value + "%";
            }
            
            private function thematicTBB_valueCommitHandler(event:FlexEvent):void {
                var selectedIndex:int = thematicTBB.selectedIndex;
                if (selectedIndex >= 0) {
                    graphicsLayer.symbolFunction = selectedIndex == 0 ? getSalePriceSymbol : getYearBuiltSymbol
                    legends.visible = true;
                    legends.selectedIndex = selectedIndex;
                } else {
                    graphicsLayer.symbolFunction = null;
                    legends.visible = false;
                }
            }
        ]]>
    </mx:Script>
    
    <!-- start declarations -->
    <esri:QueryTask id="queryTask"
        url="http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Portland/ESRI_LandBase_WebMercator/MapServer/2"
        executeComplete="queryExecuteCompleteHandler(event)"/>
    
    <esri:Query id="query" returnGeometry="true" geometry="{map.extent}"
        outFields="['OBJECTID','SALEPRICE','YEARBUILT']"
        outSpatialReference="{map.spatialReference}" where="AREA > 2000" />
    
    <mx:CurrencyFormatter id="currencyFormatter"/>
    
    <mx:Glow id="glowEffect" alphaFrom="0.9" alphaTo="0.5" 
        blurXFrom="0.0" blurXTo="50.0" blurYFrom="0.0" blurYTo="50.0"
        color="0x0000FF" inner="true"/>

    <!-- start UI -->
    <mx:Canvas width="100%" height="100%">
        <esri:Map id="map" level="14" load="map.centerAt(new MapPoint(-122.598, 45.569))">
            <esri:ArcGISTiledMapServiceLayer
                url="http://server.arcgisonline.com/ArcGIS/rest/services/ESRI_StreetMap_World_2D/MapServer"/>
            <esri:ArcGISTiledMapServiceLayer alpha="{lyrSlider.value}"
                url="http://server.arcgisonline.com/ArcGIS/rest/services/ESRI_Imagery_World_2D/MapServer"/>
            <esri:GraphicsLayer id="graphicsLayer"
                alpha="{1 - hSlider.value / 100}"
                symbol="{noDataSymbol}"/>
            <!-- performance tip: adjust alpha on layer instead of every graphic or symbol -->
        </esri:Map>
        <mx:HSlider id="lyrSlider" right="5" top="5" minimum="0" maximum="1" value="1"
            liveDragging="true"/>
    </mx:Canvas>
    
    <mx:VBox>
        <mx:Spacer height="5"/>
        <mx:Button label="Load Tax Lots" click="queryTask.execute(query)"/>
        <mx:Label text="Adjust Tax Lots Transparency"/>
        <mx:HSlider id="hSlider" minimum="0" maximum="100" value="75"
            snapInterval="1" tickInterval="10" labels="['0%', '100%']"
            liveDragging="true" dataTipFormatFunction="toPercent"/>
        <mx:ToggleButtonBar id="thematicTBB" 
                creationComplete="thematicTBB.selectedIndex = -1" 
                toggleOnClick="true"
                valueCommit="thematicTBB_valueCommitHandler(event)">
            <mx:dataProvider>
                <mx:ArrayCollection>
                    <mx:Object label="Sale Price" toolTip="Color by the Sale Price"/>
                    <mx:Object label="Year Built" toolTip="Color by the Year Built"/>
                </mx:ArrayCollection>
            </mx:dataProvider>
        </mx:ToggleButtonBar>
        
        <mx:ViewStack id="legends" visible="false" width="100%">
            <mx:VBox id="salePriceLegend" initialize="createSalePriceLegend()" alpha="{graphicsLayer.alpha}">
                <mx:Label text="Sale Price" fontWeight="bold"/>
            </mx:VBox>
            <mx:VBox id="yearBuiltLegend" initialize="createYearBuiltLegend()" alpha="{graphicsLayer.alpha}">
                <mx:Label text="Year Built" fontWeight="bold"/>
            </mx:VBox>
        </mx:ViewStack>
    </mx:VBox>
</mx:Application>
