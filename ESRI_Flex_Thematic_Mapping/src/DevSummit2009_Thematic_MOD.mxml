<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml"
        xmlns:esri="http://www.esri.com/2008/ags"
        layout="horizontal" styleName="plain"
        pageTitle="Flex Thematic Mapping demo(ClassBreaksRenderer)">
    <mx:Style>
        HSlider {
           borderColor: #336699;
           invertThumbDirection: true;
           labelOffset: 41;
           showTrackHighlight: true;
           tickOffset: 17;
        }
    </mx:Style>
    
    <mx:Script>
        <![CDATA[
            import mx.events.ItemClickEvent;
            import mx.controls.Label;
            import mx.containers.HBox;
            import mx.core.UIComponent;
            import com.esri.ags.geometry.MapPoint;
            import com.esri.ags.Graphic;
            import com.esri.ags.events.QueryEvent;
            import com.esri.ags.symbol.Symbol;
            import com.esri.ags.symbol.SimpleFillSymbol;
            import com.esri.ags.symbol.SimpleLineSymbol;
            
            private var lineSymbol:SimpleLineSymbol = new SimpleLineSymbol("solid", 0x000000);
            [Bindable]
            private var noDataSymbol:Symbol = new SimpleFillSymbol("solid", 0x000000, 1.0, lineSymbol);

            private var salePriceSymbols:Array = [
                new SimpleFillSymbol("solid", 0xFFFFCC, 1.0, lineSymbol),
                new SimpleFillSymbol("solid", 0xC2E699, 1.0, lineSymbol),
                new SimpleFillSymbol("solid", 0x78C679, 1.0, lineSymbol),
                new SimpleFillSymbol("solid", 0x31A354, 1.0, lineSymbol),
                new SimpleFillSymbol("solid", 0x006837, 1.0, lineSymbol)
            ];

            private var yearBuiltSymbols:Array = [
                new SimpleFillSymbol("solid", 0xFFFFB2, 1.0, lineSymbol),
                new SimpleFillSymbol("solid", 0xFECC5C, 1.0, lineSymbol),
                new SimpleFillSymbol("solid", 0xFD8D3C, 1.0, lineSymbol),
                new SimpleFillSymbol("solid", 0xF03B20, 1.0, lineSymbol),
                new SimpleFillSymbol("solid", 0xBD0026, 1.0, lineSymbol)
            ];
            
            private function createSalePriceLegend():void {
                salePriceLegend.addChild(createLegendItem(salePriceSymbols[4].color, "More than $800K"));
                salePriceLegend.addChild(createLegendItem(salePriceSymbols[3].color, "$600K to $800K"));
                salePriceLegend.addChild(createLegendItem(salePriceSymbols[2].color, "$400K to $600K"));
                salePriceLegend.addChild(createLegendItem(salePriceSymbols[1].color, "$200K to $400K"));
                salePriceLegend.addChild(createLegendItem(salePriceSymbols[0].color, "Less than $200K"));
                salePriceLegend.addChild(createLegendItem(0x000000, "No Data"));
            }

            private function createYearBuiltLegend():void {
                yearBuiltLegend.addChild(createLegendItem(yearBuiltSymbols[4].color, "Newer than 1990"));
                yearBuiltLegend.addChild(createLegendItem(yearBuiltSymbols[3].color, "1960 to 1990"));
                yearBuiltLegend.addChild(createLegendItem(yearBuiltSymbols[2].color, "1930 to 1960"));
                yearBuiltLegend.addChild(createLegendItem(yearBuiltSymbols[1].color, "1900 to 1930"));
                yearBuiltLegend.addChild(createLegendItem(yearBuiltSymbols[0].color, "Older than 1900"));
                yearBuiltLegend.addChild(createLegendItem(0x000000, "No Data"));
            }
            
            private function createLegendItem(color:uint, text:String):UIComponent {
                var hbox:HBox = new HBox();
                
                hbox.addChild(createSwatch(color));
                var label:Label = new Label();
                label.text = text;
                hbox.addChild(label);
                
                return hbox;
            }
            
            private function createSwatch(color:uint):UIComponent {
                var swatch:UIComponent = new UIComponent();
                
                swatch.width = 30;
                swatch.height = 20;
                swatch.graphics.beginFill(color);
                swatch.graphics.drawRoundRect(0, 0, swatch.width, swatch.height, 10);
                swatch.graphics.endFill();
                
                return swatch;
            }
            
            private function queryExecuteCompleteHandler(event:QueryEvent):void {
                var features:Array = event.featureSet.features;
                for each (var graphic:Graphic in features) {
                    // using weak references
                    graphic.addEventListener(MouseEvent.ROLL_OVER, graphicRollOverHandler, false, 0, true);
                    graphic.addEventListener(MouseEvent.ROLL_OUT, graphicRollOutHandler, false, 0, true);
                    graphic.toolTip = "ID: " + graphic.attributes.OBJECTID + "\n"
                        + "Sale Price: " + currencyFormatter.format(graphic.attributes.SALEPRICE) 
                        + "\n"
                        + "Year Built: " + graphic.attributes.YEARBUILT;
                }
                // faster than adding one at a time
                graphicsLayer.graphicProvider = features;
            }

            private function graphicRollOverHandler(event:MouseEvent):void {
                glowEffect.play([event.target]);
            }
            
            private function graphicRollOutHandler(event:MouseEvent):void {
                // play reversed
                glowEffect.play([event.target], true);
                setTimeout(cleanupGlowEffect, glowEffect.duration, event.target);
            }
            
            private function cleanupGlowEffect(graphic:Graphic):void {
                // remove leftover artifacts
                graphic.filters = [];
            }
            
            private function toPercent(value:Number):String {
                return value + "%";
            }
            
            private function clickHandler(event:ItemClickEvent):void {
                // 从这个点击事件中没有办法获得selectedIndex = -1的情况
                trace(thematicTBB.selectedIndex);
//                var selectedIndex:int = event.index;
//                if (selectedIndex != -1) {
//                    graphicsLayer.renderer = renderers[selectedIndex];
//                } else {
//                    graphicsLayer.renderer = null;
//                }
            }
        ]]>
    </mx:Script>
    
    <esri:QueryTask id="queryTask"
        url="http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Portland/ESRI_LandBase_WebMercator/MapServer/2"
        executeComplete="queryExecuteCompleteHandler(event)"/>
    <esri:Query id="query" returnGeometry="true" geometry="{map.extent}"
        outFields="['OBJECTID','SALEPRICE','YEARBUILT']"
        outSpatialReference="{map.spatialReference}" where="AREA > 2000" />
    
    <mx:Array id="renderers">
        <esri:ClassBreaksRenderer id="salePriceRenderer" attribute="SALEPRICE" defaultSymbol="{noDataSymbol}">
            <!-- 等于0的值也属于这个区域, 会直接使用该样式, 郁闷, 暂用0.1 -->
            <esri:ClassBreakInfo minValue="0.1" maxValue="200000" symbol="{salePriceSymbols[0]}" />
            <esri:ClassBreakInfo minValue="200000" maxValue="400000" symbol="{salePriceSymbols[1]}" />
            <esri:ClassBreakInfo minValue="400000" maxValue="600000" symbol="{salePriceSymbols[2]}" />
            <esri:ClassBreakInfo minValue="600000" maxValue="800000" symbol="{salePriceSymbols[3]}" />
            <esri:ClassBreakInfo minValue="800000" symbol="{salePriceSymbols[4]}" />
        </esri:ClassBreaksRenderer>
        
        <esri:ClassBreaksRenderer id="yearBuiltRenderer" attribute="YEARBUILT" defaultSymbol="{noDataSymbol}">
            <!-- 等于0的值也属于这个区域, 会直接使用该样式, 郁闷, 暂用0.1 -->
            <esri:ClassBreakInfo minValue="0.1" maxValue="1900" symbol="{yearBuiltSymbols[0]}" />
            <esri:ClassBreakInfo minValue="1900" maxValue="1930" symbol="{yearBuiltSymbols[1]}" />
            <esri:ClassBreakInfo minValue="1930" maxValue="1960" symbol="{yearBuiltSymbols[2]}" />
            <esri:ClassBreakInfo minValue="1960" maxValue="1990" symbol="{yearBuiltSymbols[3]}" />
            <esri:ClassBreakInfo minValue="1990" symbol="{yearBuiltSymbols[4]}" />
        </esri:ClassBreaksRenderer>
    </mx:Array>
    
    <mx:CurrencyFormatter id="currencyFormatter"/>
    
    <mx:Glow id="glowEffect" alphaFrom="0.9" alphaTo="0.5" 
        blurXFrom="0.0" blurXTo="50.0" blurYFrom="0.0" blurYTo="50.0"
        color="0x0000FF" inner="true"/>

    <mx:Canvas width="100%" height="100%">
        <esri:Map id="map" level="14" load="map.centerAt(new MapPoint(-122.598, 45.569))">
            <esri:ArcGISTiledMapServiceLayer alpha="{lyrSlider.value}"
                url="http://server.arcgisonline.com/ArcGIS/rest/services/ESRI_Imagery_World_2D/MapServer"/>
            <esri:GraphicsLayer id="graphicsLayer"
                alpha="{1 - hSlider.value / 100}"
                symbol="{noDataSymbol}" renderer="{renderers[thematicTBB.selectedIndex]}"/>
            <!-- performance tip: adjust alpha on layer instead of every graphic or symbol -->
        </esri:Map>
        <mx:HSlider id="lyrSlider" right="5" top="5" minimum="0" maximum="1" value="1"
            liveDragging="true"/>
    </mx:Canvas>
    
    <mx:VBox>
        <mx:Spacer height="5"/>
        <mx:Button label="Load Tax Lots" click="queryTask.execute(query)"/>
        <mx:Label text="Adjust Tax Lots Transparency"/>
        <mx:HSlider id="hSlider" minimum="0" maximum="100" value="75"
            snapInterval="1" tickInterval="10" labels="['0%', '100%']"
            liveDragging="true" dataTipFormatFunction="toPercent"/>
        <mx:ToggleButtonBar id="thematicTBB" dataProvider="{legends}"
            creationComplete="thematicTBB.selectedIndex = -1" 
            toggleOnClick="true" itemClick="clickHandler(event)"/>
        
        <mx:ViewStack id="legends" visible="{thematicTBB.selectedIndex != -1}" width="100%">
            <mx:VBox id="salePriceLegend" label="Sale Price" 
                    toolTip="Color by the Sale Price" 
                    initialize="createSalePriceLegend()" alpha="{graphicsLayer.alpha}">
                <mx:Label text="Sale Price" fontWeight="bold"/>
            </mx:VBox>
            <mx:VBox id="yearBuiltLegend" label="Year Built" 
                    toolTip="Color by the Year Built"
                    initialize="createYearBuiltLegend()" alpha="{graphicsLayer.alpha}">
                <mx:Label text="Year Built" fontWeight="bold"/>
            </mx:VBox>
        </mx:ViewStack>
        <mx:Button label="After ToggleButtonBar Click" 
            click="trace('after: ', thematicTBB.selectedIndex)"/>
    </mx:VBox>
</mx:Application>
